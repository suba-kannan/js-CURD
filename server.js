const express = require("express");
const database = require("./database");
const app = express();
const PORT = 3001;

app.use(express.json());

// READ ALL
app.get('/employees', (req, res) => {
    database.query('SELECT * FROM employee', (err, employees) => {
        if (err) return res.status(500).json({ message: 'Error fetching employees' });
        res.json(employees.map(employee => (
            { 
                id: employee.id, 
                firstName: employee.firstName, 
                lastName: employee.lastName, 
                email: employee.email 
            }
        )));
    });
});

// READ BY ID
app.get('/employees/:id', (req, res) => {
    const id = parseInt(req.params.id);
    database.query('SELECT * FROM employee WHERE id = ?', [id], (err, employees) => {
        if (err) return res.status(500).json({ message: 'Error fetching employee' });
        if (employees.length === 0) return res.status(404).json({ message: "Employee not found" });
        res.json(employees[0]);
    });
});

// CREATE
app.post('/employees', (req, res) => {
    const { firstName, lastName, email } = req.body;
    database.query('INSERT INTO employee (firstName, lastName, email) VALUES (?, ?, ?)', [firstName, lastName, email], (err, result) => {
        if (err) return res.status(500).json({ message: 'Error inserting employee' });
        res.status(201).json({ id: result.insertId, firstName, lastName, email });//Returns the ID generated by an INSERT or UPDATE query on a table
    });
});

// UPDATE
app.put('/employees/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const { firstName, lastName, email } = req.body;
    database.query('UPDATE employee SET firstName = ?, lastName = ?, email = ? WHERE id = ?', [firstName, lastName, email, id], (err, result) => {
        if (err) return res.status(500).json({ message: 'Error updating employee' });
        if (result.affectedRows === 0) return res.status(404).json({ message: "Employee not found or not changed" });
        res.json({ id:result.insertId, firstName, lastName, email });
    });
});

// DELETE
app.delete('/employees/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    database.query('DELETE FROM employee WHERE id = ?', [id], (err, result) => {
        if (err) return res.status(500).json({ message: 'Error deleting employee' });
        if (result.affectedRows === 0) return res.status(404).json({ message: "Employee not found" });
        res.json({ message: 'Employee deleted' });
    });
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

